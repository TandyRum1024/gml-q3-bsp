// 2019-08-22 06:18:25
#event create
iui_init();
map = zbsp_load_map("lun3dm5.bsp", true, true);
// surface_save(map[? "res-lightatlas-surf"], map[? "meta-res-dir"] + "\lightmapdump\lmap_whole.png");
// zbsp_init();

// Mouse related
mouseSensitivity = 0.3;
mouseLock = false;

// Debug draw related
debugDrawBbox = false;
debugDrawLvol = false;

// Current lightmap selected
debugCurrentLightmap = 0;

// PVS related
debugCullX = 0;
debugCullY = 0;
debugCullZ = 0;

renderLeafList = ds_list_create();
renderLeafCulled = 0;

// Shader related
shaderLevelLightmap = shader_get_sampler_index(shd_level, "uLightmap");

// Begin 3D
z3d_init();

#event destroy
d3d_end();
zbsp_free_map(map);

#event step Update camera & debug key input
var _scrw = window_get_width(), _scrh = window_get_height();

if (keyboard_check_pressed(ord('1')))
    debugDrawBbox = !debugDrawBbox;
    
if (keyboard_check_pressed(ord('2')))
    debugDrawLvol = !debugDrawLvol;

if (keyboard_check_pressed(ord('L')))
{
    mouseLock = !mouseLock;
    window_mouse_set(_scrw * 0.5, _scrh * 0.5);
}

if (mouseLock)
{
    var _dx = window_mouse_get_x() - (_scrw * 0.5);
    var _dy = window_mouse_get_y() - (_scrh * 0.5);
    camRotH += _dx * mouseSensitivity;
    camRotV += _dy * mouseSensitivity;
    camTilt += _dx * mouseSensitivity * 0.2;
    window_mouse_set(_scrw * 0.5, _scrh * 0.5);
    
    z3d_update_vectors();
    
    // move camera
    var _inputfwd = keyboard_check(ord('W')) - keyboard_check(ord('S'));
    var _inputside = keyboard_check(ord('D')) - keyboard_check(ord('A'));
    if (_inputfwd != 0 || _inputside != 0)
    {
        var _wishdirx = camFwdX * _inputfwd - dsin(camRotH) * _inputside;
        var _wishdiry = camFwdY * _inputfwd + dcos(camRotH) * _inputside;
        var _wishdirz = camFwdZ * _inputfwd;
        
        z3d_accelerate(0.25, 6, _wishdirx, _wishdiry, _wishdirz);
    }
}
else
{
    z3d_update_vectors();
}

camX += camVX;
camY += camVY;
camZ += camVZ;
camTilt = lerp(camTilt, 0, 0.08);
camVX *= 0.95;
camVY *= 0.95;
camVZ *= 0.95;
iui_update_io();
#section Update PVS & Cull invisible leaf
// Get current leaf
var _leafs = map[? "leafs-data"];
var _nodes = map[? "nodes-data"];
var _planes = map[? "planes-data"];
var _currentnode = 0;

while (_currentnode >= 0)
{
    var _nodeplane = _nodes[# eBSP_NODE.PLANE, _currentnode];
    var _planenx = _planes[# eBSP_PLANE.NORMAL_X, _nodeplane], _planeny = -_planes[# eBSP_PLANE.NORMAL_Y, _nodeplane], _planenz = _planes[# eBSP_PLANE.NORMAL_Z, _nodeplane];
    var _planedist = _planes[# eBSP_PLANE.DISTANCE, _nodeplane];
    
    var _dist = dot_product_3d(_planenx, _planeny, _planenz, camX, camY, camZ) - _planedist;
    
    if (_dist >= 0)
    {
        _currentnode = _nodes[# eBSP_NODE.CHILD_FRONT, _currentnode];
    }
    else
    {
        _currentnode = _nodes[# eBSP_NODE.CHILD_BACK, _currentnode];
    }
}
var _currentleaf = -_currentnode - 1;
var _currentcluster = _leafs[# 0, _currentleaf];

// Calculate PVS
var _visdata = map[? "visdata"];
var _bytespercluster = map[? "visdata-size"];
ds_list_clear(renderLeafList);
renderLeafCulled = 0;

if (map[? "visdata-num"] <= 0 || map[? "visdata-size"] <= 0 || _currentcluster < 0)
{
    for (var i=0; i<map[? "leafs-num"]; i++)
    {
        ds_list_add(renderLeafList, i);
    }
}
else
{
    for (var i=0; i<map[? "leafs-num"]; i++)
    {
        var _clustervictm = _leafs[# 0, i];
        
        // Check PVS bits
        // each cluster has _bytespercluster amount of list entries, with each bit corresponding to other clusters.
        var _vecidx = _currentcluster * _bytespercluster + (_clustervictm >> 3);
        //var _visset = _visdata[| _vecidx];
        
        if (buffer_peek(_visdata, _vecidx, buffer_u8) & (1 << (_clustervictm & 7)))
        {
            ds_list_add(renderLeafList, i);
        }
        else
        {
            renderLeafCulled++;
        }
    }
}

#event draw Set camera
d3d_set_projection_ext(camX, camY, camZ, camX + camFwdX, camY + camFwdY, camZ + camFwdZ, camUpX, camUpY, camUpZ, 90, window_get_width() / window_get_height(), 1, 16000);
#section Test draw level
var _leafs = map[? "leafs-data"];
var _leaffaces = map[? "leaffaces-data"];
var _vertexbuffers = map[? "faces-buffers"];
var _faces = map[? "faces-data"];
var _textures = map[? "textures-list"];

// Draw level
if (map[? "has-asset"])
{
    texture_set_repeat(true);
    texture_set_interpolation(true);
    
    shader_set(shd_level);
    texture_set_stage(shaderLevelLightmap, map[? "res-lightatlas-tex"]);
    
    for (var i=0; i<ds_list_size(renderLeafList); i++)
    {
        var _currentleaf = renderLeafList[| i];
        var _lfidx = _leafs[# 8, _currentleaf];
        var _lfnum = _leafs[# 9, _currentleaf];
        
        for (var j=0; j<_lfnum; j++)
        {
            var _faceidx = _leaffaces[| _lfidx + j];
            var _type = _faces[# 2, _faceidx];
            
            
            var _texidx = _faces[# eBSP_FACE.TEXTURE, _faceidx];
            var _vb = _vertexbuffers[| _faceidx];
            vertex_submit(_vb, pr_trianglelist, _textures[| _texidx]);
        }
    }
    
    shader_reset();
    
    texture_set_interpolation(false);
    texture_set_repeat(false);
}
else
{
    shader_set(shd_level_notex);
    for (var i=0; i<ds_list_size(renderLeafList); i++)
    {
        var _currentleaf = renderLeafList[| i];
        var _lfidx = _leafs[# 8, _currentleaf];
        var _lfnum = _leafs[# 9, _currentleaf];
        
        for (var j=0; j<_lfnum; j++)
        {
            var _faceidx = _leaffaces[| _lfidx + j];
            var _type = _faces[# 2, _faceidx];
            
            var _texidx = _faces[# eBSP_FACE.TEXTURE, _faceidx];
            var _vb = _vertexbuffers[| _faceidx];
            vertex_submit(_vb, pr_trianglelist, map[? "res-lightatlas-tex"]);//_textures[| _texidx]);
        }
    }
    shader_reset();
}

d3d_draw_block(debugCullX - 8, debugCullY - 8, debugCullZ - 8, debugCullX + 8, debugCullY + 8, debugCullZ + 8, -1, false, false);

// Draw debug stuff
if (debugDrawBbox)
    vertex_submit(map[? "vb-debug-bbox"], pr_linelist, -1);

if (debugDrawLvol)
    vertex_submit(map[? "vb-debug-lightvol"], pr_trianglelist, -1);

#event draw_gui Draw UI
var _scrw = window_get_width(), _scrh = window_get_height();
var _tophei = 160;
var _topmarginy = 50;

draw_set_font(fntMain16);
iui_begin();

iui_rect(0, 0, _scrw, _tophei, iuHellaDark);
ui_tabidx = iui_tab(0, 0, 80, 30, pack("MAP", "INFO", "DIRENTRY", "LUMPS", "LMAP", "TEX"), ui_tabidx, 2);

switch (ui_tabidx)
{
    case 0:
        iui_label_shadow(10, _topmarginy, "FILENAME : " + map[? "meta-filename"], iuCream, 0, 1, c_black);
        iui_label_shadow(10, _topmarginy + 20, "FILETYPE : " + map[? "meta-filetype"], iuCream, 0, 1, c_black);
        iui_label_shadow(10, _topmarginy + 40, "MAP NAME : " + map[? "meta-map-name"], iuCream, 0, 1, c_black);
        iui_label_shadow(10, _topmarginy + 60, "SUCCESS : " + string(map[? "success"]) + " | " + map[? "error"], iuCream, 0, 1, c_black);
        break;
        
    case 1:
        iui_label_shadow(10, _topmarginy, "LEAF : " + string(ds_list_size(renderLeafList)), iuCream, 0, 1, c_black);
        iui_label_shadow(10, _topmarginy + 20, "LEAF CULLED : " + string(renderLeafCulled), iuCream, 0, 1, c_black);
        break;
        
    case 2:
        iui_rect(0, _tophei, _scrw, _scrh - _tophei, iuHellaDark);
        
        var _off = 0;
        for (var i=0; i<array_length_1d(global.BSPLumpNames); i++)
        {
            iui_label_shadow(10, _topmarginy + _off, "OFFSET : " + string(map[? global.BSPLumpNames[@i] + "-diroff"]), iuCream, 0, 1, c_black);
            iui_label_shadow(10, _topmarginy + _off + 20, "LENGTH : " + string(map[? global.BSPLumpNames[@i] + "-dirlen"]), iuCream, 0, 1, c_black);
            _off += 40;
        }
        break;
        
    case 3:
        iui_rect(0, _tophei, _scrw, _scrh - _tophei, iuHellaDark);
        
        _topmarginy += 30;
        
        draw_set_font(fntMain8);
        ui_lumptabidx = iui_tab(0, 30, 64, 30, global.BSPLumpNames, ui_lumptabidx, 1);
        draw_set_font(fntMain16);
        
        switch (ui_lumptabidx)
        {
            case eBSP_LUMP.ENTITIES:
                var _drawtext = trim_text_lines(map[? "entities"], ui_entitiesscroll, ui_entitiesscroll + 20);
                if (mouse_wheel_up()) ui_entitiesscroll = max(0, ui_entitiesscroll - 1);
                if (mouse_wheel_down()) ui_entitiesscroll++;
                
                iui_label_shadow(10, _topmarginy, _drawtext, iuCream, 0, 1, c_black);
                break;
                
            case eBSP_LUMP.TEXTURES:
                var _textures = map[? "textures-data"];
                var _maptextures = map[? "meta-res-tex-dir"];
                
                iui_label_shadow(10, _topmarginy, string(map[? "textures-num"]) + " TEXTURES NEEDED", iuCream, 0, 1, c_black);
                draw_set_font(fntMain8);
                for (var i=0; i<map[? "textures-num"]; i++)
                {
                    iui_label_shadow(10, _topmarginy + 30 + 10 * i, _textures[# 0, i], iuCream, 0, 1, c_black);
                }
                draw_set_font(fntMain16);
                
                iui_label_shadow(_scrw * 0.5 + 10, _topmarginy, string(ds_list_size(_maptextures)) + " MAP TEXTURES FOUND", iuCream, 0, 1, c_black);
                draw_set_font(fntMain8);
                for (var i=0; i<ds_list_size(_maptextures); i++)
                {
                    iui_label_shadow(_scrw * 0.5 + 10, _topmarginy + 30 + 10 * i, _maptextures[| i], iuCream, 0, 1, c_black);
                }
                draw_set_font(fntMain16);
                break;
                
            case eBSP_LUMP.PLANES:
                var _planes = map[? "planes-data"];
                
                iui_label_shadow(10, _topmarginy, string(map[? "planes-num"]) + " PLANES", iuCream, 0, 1, c_black);
                
                draw_set_font(fntMain8);
                for (var i=0; i<map[? "planes-num"]; i++)
                {
                    iui_label_shadow(10, _topmarginy + 30 + 10 * i, string(_planes[# 0, i]) + ", " + string(_planes[# 1, i]) + ", " + string(_planes[# 2, i]) + " | " + string(_planes[# 3, i]), iuCream, 0, 1, c_black);
                }
                draw_set_font(fntMain16);
                break;
        }
        break;
        
    case 4:
        if (keyboard_check_pressed(vk_right))
        {
            debugCurrentLightmap = (debugCurrentLightmap + 1) % map[? "lightmaps-num"];
        }
        if (keyboard_check_pressed(vk_left))
        {
            debugCurrentLightmap = (debugCurrentLightmap + map[? "lightmaps-num"] - 1) % map[? "lightmaps-num"];
        }
    
        var _cx = _scrw * 0.5, _cy = _scrh * 0.5;
        iui_rect(0, _tophei, _scrw, _scrh - _tophei, iuHellaDark);
        //draw_surface_stretched(map[? "res-lightatlas-surf"], _cx - 300, _cy - 300, 600, 600);
        draw_sprite_stretched(map[? "res-lightatlas-spr"], 0, _cx - 300, _cy - 300, 600, 600);
        
        var _lightmaps = map[? "lightmaps-data"];
        var _lightmapspr = map[? "lightmaps-sprites"];
        var _lx1 = _lightmaps[# 1, debugCurrentLightmap] * 600;
        var _ly1 = _lightmaps[# 2, debugCurrentLightmap] * 600;
        var _lx2 = _lightmaps[# 3, debugCurrentLightmap] * 600;
        var _ly2 = _lightmaps[# 4, debugCurrentLightmap] * 600;
        
        iui_rect_pos(_cx - 300 + _lx1, _cy - 300 + _ly1, _cx - 300 + _lx2, _cy - 300 + _ly2, c_red, 0.5);
        //draw_sprite(_lightmapspr[| debugCurrentLightmap], 0, _cx - 300 + _lx1, _cy - 300 + _ly1);
        
        iui_align_push(1, 2);
        iui_label_shadow(_cx, _scrh - 10, "LIGHTMAP : " + string(debugCurrentLightmap), c_yellow, 0, 1, c_black);
        iui_align_pop();
        break;
        
    case 5:
        var _cx = _scrw * 0.5, _cy = _scrh * 0.5;
        iui_rect(0, _tophei, _scrw, _scrh - _tophei, iuHellaDark);
        
        var _textures = map[? "textures-sprites"];
        var _drawx = 0;
        var _drawy = _tophei;
        var _maxh = 0;
        
        for (var i=0; i<ds_list_size(_textures); i++)
        {
            var _spr = _textures[| i];
            var _sprw = sprite_get_width(_spr), _sprh = sprite_get_height(_spr);
            var _sprratio = 64 / _sprw;
            
            draw_sprite_stretched(_spr, 0, _drawx, _drawy, _sprw * _sprratio, _sprh * _sprratio);
            _drawx += 64;
            _maxh = max(_maxh, _sprh * _sprratio);
            
            if (_drawx > _scrw)
            {
                _drawy += _maxh + 2;
                _drawx = 0;
                _maxh = 0;
            }
        }
        break;
}

draw_set_font(fntMain16);
iui_align_push(2, 2);
if (mouseLock)
{
    var _wid = string_width("MOUSE LOCKED"), _hei = string_height("MOUSE LOCKED");
    iui_rect_pos(_scrw - _wid, _scrh - _hei, _scrw, _scrh, $FF00FF, 1);
    iui_label_shadow(_scrw, _scrh, "MOUSE LOCKED", c_white, 0, 1, c_black);
}
else
{
    var _wid = string_width("MOUSE UNLOCKED"), _hei = string_height("MOUSE UNLOCKED");
    iui_rect_pos(_scrw - _wid, _scrh - _hei, _scrw, _scrh, $FF00FF, 1);
    iui_label_shadow(_scrw, _scrh, "MOUSE UNLOCKED", c_white, 0, 1, c_black);
}
iui_align_pop();

iui_end();

var _amp = 64;
draw_line_color(_scrw * 0.5, _scrh * 0.5, _scrw * 0.5 + camFwdY * _amp, _scrh * 0.5 + camFwdZ * _amp, c_red, c_red);
draw_line_color(_scrw * 0.5, _scrh * 0.5, _scrw * 0.5 + camUpY * _amp, _scrh * 0.5 + camUpZ * _amp, c_blue, c_blue);