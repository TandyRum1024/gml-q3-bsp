<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>billboards = d3d_model_create();
time = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d3d_model_destroy(billboards);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update time
time++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var _billboardmdl = billboards;
var _time = time;
var _targetx = 0, _targety = 0, _targetz = 0;

var _lightvolcellsizeh = 64; // cell size of lightvol grid in x-y axis (constant)
var _lightvolcellsizev = 128; // cell size of lightvol grid in z axis (constant)
var _lvolsizex = 0, _lvolsizey = 0, _lvolsizez = 0, _lvoloffxy = 0;
var _lvoloriginx = 0, _lvoloriginy = 0, _lvoloriginz = 0;
var _lvoldata = -1;

// Fetch camera position
with (oControl)
{
    if (BSPMapLoaded)
    {
        _targetx = camX;
        _targety = camY;
        _targetz = camZ;
        
        _lvolsizex = map[? "lightvols-size-x"];
        _lvolsizey = map[? "lightvols-size-y"];
        _lvolsizez = map[? "lightvols-size-z"];
        _lvoloriginx = map[? "lightvols-off-x"];
        _lvoloriginy = map[? "lightvols-off-y"];
        _lvoloriginz = map[? "lightvols-off-z"];
        _lvoldata = map[? "lightvols-data"];
        
        _lvoloffxy = _lvolsizex * _lvolsizey;
        
        //show_debug_message("LVOL SZ : " + string(_lvolsizex) + ", " + string(_lvolsizey) + ", " + string(_lvolsizez));
        //show_debug_message("LVOL OG : " + string(_lvoloriginx) + ", " + string(_lvoloriginy) + ", " + string(_lvoloriginz));
        
        d3d_draw_block(_lvoloriginx, _lvoloriginy, _lvoloriginz, _lvoloriginx + 32, _lvoloriginy + 32, _lvoloriginz + 32, -1, 1, 1);
    }
}

// Build &amp; render billboards
shader_set(shd_model);
var _uLightAmbient = shader_get_uniform(shd_model, "uLightAmbient");
var _uLightDirectional = shader_get_uniform(shd_model, "uLightDirectional");
var _uLightPhiTheta = shader_get_uniform(shd_model, "uLightPhiTheta");

draw_set_alpha_test(true);
draw_set_alpha_test_ref_value(127);
draw_set_colour(c_white);
with (oBillboard)
{
    var _deltax = _targetx - x;
    var _deltay = _targety - y;
    var _deltamag = 1 / sqrt(_deltax * _deltax + _deltay * _deltay);
    _deltax *= _deltamag;
    _deltay *= _deltamag;
    
    var _minx = x - _deltay * sizeW;
    var _miny = y + _deltax * sizeW;
    var _maxx = x + _deltay * sizeW;
    var _maxy = y - _deltax * sizeW;
    
    d3d_model_clear(_billboardmdl);
    d3d_model_primitive_begin(_billboardmdl, pr_trianglelist);
    d3d_model_vertex_texture(_billboardmdl, _minx, _miny, z + sizeH, 0, 0);
    d3d_model_vertex_texture(_billboardmdl, _maxx, _maxy, z + sizeH, 1, 0);
    d3d_model_vertex_texture(_billboardmdl, _minx, _miny, z - sizeH, 0, 1);
    
    d3d_model_vertex_texture(_billboardmdl, _minx, _miny, z - sizeH, 0, 1);
    d3d_model_vertex_texture(_billboardmdl, _maxx, _maxy, z + sizeH, 1, 0);
    d3d_model_vertex_texture(_billboardmdl, _maxx, _maxy, z - sizeH, 1, 1);
    d3d_model_primitive_end(_billboardmdl);
    
    // Calculate lightvolume info
    var _amb_r = 1, _amb_g = 1, _amb_b = 1;
    var _amb2_r = 1, _amb2_g = 1, _amb2_b = 1;
    var _dir1_r = 1, _dir1_g = 1, _dir1_b = 1;
    var _dir2_r = 1, _dir2_g = 1, _dir2_b = 1;
    var _phi1 = 0, _phi2 = 0;
    var _theta1 = 0, _theta2 = 0;
    
    if (ds_exists(_lvoldata, ds_type_grid))
    {
        var _divx = (x - _lvoloriginx) / _lightvolcellsizeh;
        var _divy = (-y - _lvoloriginy) / _lightvolcellsizeh;
        var _divz = (z - _lvoloriginz) / _lightvolcellsizev;
        var _lmapx = floor(_divx);
        var _lmapy = floor(_divy);
        var _lmapz = floor(_divz);
        
        if (_lmapx &gt;= 0 &amp;&amp; _lmapy &gt;= 0 &amp;&amp; _lmapz &gt;= 0 &amp;&amp; 
            _lmapx &lt; _lvolsizex-1 &amp;&amp; _lmapy &lt; _lvolsizey-1 &amp;&amp; _lmapz &lt; _lvolsizez-1)
        {
            var _lerpx = frac(_divx); // x-axis interpolation percentage
            var _lerpy = frac(_divy); // y-axis
            var _lerpz = frac(_divz); // z-axis
        
            // 3d array index for accessing lightvol from list
            var _lvol000 = _lmapz * _lvoloffxy + _lmapy * _lvolsizex + _lmapx;
            var _lvol100 = _lmapz * _lvoloffxy + _lmapy * _lvolsizex + (_lmapx + 1);
            var _lvol010 = _lmapz * _lvoloffxy + (_lmapy + 1) * _lvolsizex + _lmapx;
            var _lvol001 = (_lmapz + 1) * _lvoloffxy + _lmapy * _lvolsizex + _lmapx;
            var _lvol110 = _lmapz * _lvoloffxy + (_lmapy + 1) * _lvolsizex + (_lmapx + 1);
            var _lvol011 = (_lmapz + 1) * _lvoloffxy + (_lmapy + 1) * _lvolsizex + _lmapx;
            var _lvol101 = (_lmapz + 1) * _lvoloffxy + _lmapy * _lvolsizex + (_lmapx + 1);
            var _lvol111 = (_lmapz + 1) * _lvoloffxy + (_lmapy + 1) * _lvolsizex + (_lmapx + 1);
            
            // interpolate x-axis "face" for trilinear interpolation
            var _axa_r = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_R, _lvol000], _axa_g = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_G, _lvol000], _axa_b = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_B, _lvol000];
            var _axb_r = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_R, _lvol100], _axb_g = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_G, _lvol100], _axb_b = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_B, _lvol100];
            var _aya_r = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_R, _lvol010], _aya_g = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_G, _lvol010], _aya_b = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_B, _lvol010];
            var _ayb_r = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_R, _lvol110], _ayb_g = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_G, _lvol110], _ayb_b = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_B, _lvol110];
            var _aza_r = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_R, _lvol001], _aza_g = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_G, _lvol001], _aza_b = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_B, _lvol001];
            var _azb_r = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_R, _lvol101], _azb_g = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_G, _lvol101], _azb_b = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_B, _lvol101];
            var _awa_r = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_R, _lvol011], _awa_g = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_G, _lvol011], _awa_b = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_B, _lvol011];
            var _awb_r = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_R, _lvol111], _awb_g = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_G, _lvol111], _awb_b = _lvoldata[# eBSP_LIGHTVOL.AMBIENT_B, _lvol111];
            
            var _dxa_r = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_R, _lvol000], _dxa_g = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_G, _lvol000], _dxa_b = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_B, _lvol000];
            var _dxb_r = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_R, _lvol100], _dxb_g = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_G, _lvol100], _dxb_b = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_B, _lvol100];
            var _dya_r = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_R, _lvol010], _dya_g = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_G, _lvol010], _dya_b = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_B, _lvol010];
            var _dyb_r = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_R, _lvol110], _dyb_g = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_G, _lvol110], _dyb_b = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_B, _lvol110];
            var _dza_r = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_R, _lvol001], _dza_g = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_G, _lvol001], _dza_b = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_B, _lvol001];
            var _dzb_r = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_R, _lvol101], _dzb_g = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_G, _lvol101], _dzb_b = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_B, _lvol101];
            var _dwa_r = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_R, _lvol011], _dwa_g = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_G, _lvol011], _dwa_b = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_B, _lvol011];
            var _dwb_r = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_R, _lvol111], _dwb_g = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_G, _lvol111], _dwb_b = _lvoldata[# eBSP_LIGHTVOL.DIRECTION_B, _lvol111];
            
            var _ax_r = lerp(_axa_r, _axb_r, _lerpx), _ax_g = lerp(_axa_g, _axb_g, _lerpx), _ax_b = lerp(_axa_b, _axb_b, _lerpx);
            var _ay_r = lerp(_aya_r, _ayb_r, _lerpx), _ay_g = lerp(_aya_g, _ayb_g, _lerpx), _ay_b = lerp(_aya_b, _ayb_b, _lerpx);
            var _az_r = lerp(_aza_r, _azb_r, _lerpx), _az_g = lerp(_aza_g, _azb_g, _lerpx), _az_b = lerp(_aza_b, _azb_b, _lerpx);
            var _aw_r = lerp(_awa_r, _awb_r, _lerpx), _aw_g = lerp(_awa_g, _awb_g, _lerpx), _aw_b = lerp(_awa_b, _awb_b, _lerpx);
            
            var _dx_r = lerp(_dxa_r, _dxb_r, _lerpx), _dx_g = lerp(_dxa_g, _dxb_g, _lerpx), _dx_b = lerp(_dxa_b, _dxb_b, _lerpx);
            var _dy_r = lerp(_dya_r, _dyb_r, _lerpx), _dy_g = lerp(_dya_g, _dyb_g, _lerpx), _dy_b = lerp(_dya_b, _dyb_b, _lerpx);
            var _dz_r = lerp(_dza_r, _dzb_r, _lerpx), _dz_g = lerp(_dza_g, _dzb_g, _lerpx), _dz_b = lerp(_dza_b, _dzb_b, _lerpx);
            var _dw_r = lerp(_dwa_r, _dwb_r, _lerpx), _dw_g = lerp(_dwa_g, _dwb_g, _lerpx), _dw_b = lerp(_dwa_b, _dwb_b, _lerpx);
            
            // bilinear interpolate the resulting x, y, z, w values
            _amb_r = zbsp_calc_bilinear(_ax_r, _ay_r, _az_r, _aw_r, _lerpy, _lerpz);
            _amb_g = zbsp_calc_bilinear(_ax_g, _ay_g, _az_g, _aw_g, _lerpy, _lerpz);
            _amb_b = zbsp_calc_bilinear(_ax_b, _ay_b, _az_b, _aw_b, _lerpy, _lerpz);
            
            _dir_r = zbsp_calc_bilinear(_dx_r, _dy_r, _dz_r, _dw_r, _lerpy, _lerpz);
            _dir_g = zbsp_calc_bilinear(_dx_g, _dy_g, _dz_g, _dw_g, _lerpy, _lerpz);
            _dir_b = zbsp_calc_bilinear(_dx_b, _dy_b, _dz_b, _dw_b, _lerpy, _lerpz);
        }
        
        shader_set_uniform_f(_uLightAmbient, _amb_r, _amb_g, _amb_b);
        shader_set_uniform_f(_uLightDirectional, _dir_r, _dir_g, _dir_b);
        
        // Draw resulting mesh
        d3d_model_draw(_billboardmdl, 0, 0, 0, sprite_get_texture(sprDenyed, _time * 0.1));
    }
}
draw_set_alpha_test(false);

shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
